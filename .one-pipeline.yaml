version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "setup"
  
test:
  dind: true
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "test"
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential
    # Run unit tests
    make unit-test

static-scan:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    read -r SONAR_HOST_URL <<< "$(get_env sonarqube | jq -r '.parameters.dashboard_url' | sed 's:/*$::')"
    read -r SONAR_USER <<< "$(get_env sonarqube | jq -r '.parameters.user_login')"
    SONARQUBE_INSTANCE_ID=$(get_env sonarqube | jq -r '.instance_id')
    read -r SONAR_PASS <<< "$(jq -r --arg sonar_instance "$SONARQUBE_INSTANCE_ID" '[.services[] | select(."service_id"=="sonarqube")][] | select(."instance_id"==$sonar_instance) | .parameters.user_password' /toolchain/toolchain.json)"  
    touch "$WORKSPACE"/open-liberty-operator/sonar-project.properties
    cat << EOF > "$WORKSPACE"/open-liberty-operator/sonar-project.properties
    sonar.projectKey=open-liberty-operator
    sonar.host.url=$SONAR_HOST_URL
    sonar.sources=.
    sonar.login=$SONAR_PASS
    sonar.c.file.suffixes=-
    sonar.cpp.file.suffixes=-
    sonar.objc.file.suffixes=-
    EOF
    chmod -x "$WORKSPACE"/open-liberty-operator/sonar-project.properties
    echo "$SONAR_PASS" >> /tmp/sonarqube-token
    "${ONE_PIPELINE_PATH}"/internal/sonarqube/sonarqube_run

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "containerize"
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz"
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential
    # Download and install skopeo
    if ! command -v skopeo &> /dev/null; then
      if [ ! -f "/apt/sources.list.d/devel:kubic:libcontainers:stable.list" ]; then
        sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        wget --no-check-certificate -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_18.04/Release.key -O- | sudo apt-key add -
        sudo apt-get update -qq
      fi
      sudo apt-get -y install skopeo
    else
      skopeo --version
    fi
    # Build images
    export PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    export PIPELINE_PASSWORD=$(get_env ibmcloud-api-key)
    # Build amd64 image
    make build-pipeline-multiarch-image
    make push-pipeline-multiarch-image
    # Build ppc64le and s390x images
    # ./scripts/pipeline/launch-travis.sh -t $(get_env travis-token) -r "https://github.com/OpenLiberty/open-liberty-operator" -b $(get_env branch) -l
    # Build bundle image
    echo $(get_env ibmcloud-api-key) | docker login cp.stg.icr.io -u "$(get_env ibmcloud-api-user)" --password-stdin
    make bundle-build
    BUNDLE_IMAGE=cp.stg.icr.io/cp/olo-operator:bundle-daily
    docker tag openliberty/operator:bundle-daily $BUNDLE_IMAGE
    docker push $BUNDLE_IMAGE
    # Build manifest
    make build-pipeline-manifest
    # Save artifacts
    declare -a tags=("daily-amd64" "daily-ppc64le" "daily-s390x")
    for i in "${tags[@]}"
    do
      IMAGE=cp.stg.icr.io/cp/olo-operator:$i
      DIGEST="$(skopeo inspect docker://$IMAGE | grep Digest | grep -o 'sha[^\"]*')"
      ARCH=$(echo $i | cut -d'-' -f 2)
      echo "Saving artifact $i name=$IMAGE digest=$DIGEST"
      save_artifact $i type=image name="$IMAGE" "digest=$DIGEST" "arch=$ARCH"
    done

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "deploy"
    # if [[ "$PIPELINE_DEBUG" == 1 ]]; then
    #   trap env EXIT
    #   env
    #   set -x
    # fi

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "dynamic-scan"
    #export APP_URL=$(cat ../app-url)
    # feature preivew this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run for preview purposes 
    #source scripts/zap/trigger_api_scan.sh

acceptance-test:
  dind: true  
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "acceptance-test"
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential
    export PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    export PIPELINE_PASSWORD=$(get_env ibmcloud-api-key)
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)
    export CLUSTER_URL=$(get_env test-cluster-url)
    export CLUSTER_TOKEN=$(get_env test-cluster-token)
    export TRAVIS_BUILD_NUMBER=$BUILD_NUMBER
    make setup
    make test-pipeline-e2e
    stage_name="acceptance-tests"
    save_artifact "olo-operator-test" "${stage_name}-result=$exit_code"

scan-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    echo "twistlock-scan"
    ./scripts/pipeline/twistlock-scan.sh
    echo "VA scan"
    . scripts/pipeline/va_scan
    if which list_artifacts >/dev/null; then
      list_artifacts | while IFS= read -r artifact; do
        image="$(load_artifact "$artifact" "name")"
        type="$(load_artifact "$artifact" "type")"
        digest="$(load_artifact "$artifact" "digest")"
        name="$(echo "$artifact" | awk '{print $1}')"
        if [[ "$type" == "image" ]]; then
          if [[ "$image" == *"icr.io"* ]]; then
            start_va_scan "$name" "$image" "$digest"
          fi
        fi
      done
    fi


release:
  abort_on_failure: false
  image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.9.1@sha256:3f3e344a1efb160d83c48cf2ee878a39cbad058c8640c423472e0546316232fd
  script: |
    #!/usr/bin/env bash
    echo "release" 

#owasp-zap-api:
#  dind: true
#  abort_on_failure: false
#  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
#  script: |
#    !/usr/bin/env bash
#    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
#      trap env EXIT
#      env
#      set -x
#    fi
    
#    source scripts/zap/setup_api_scan.sh
#    source scripts/zap/run_api_scan.sh